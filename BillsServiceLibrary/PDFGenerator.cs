using Aspose.Pdf;
using Aspose.Pdf.Text;
using BillsServiceLibrary.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BillsServiceLibrary
{
    public static class PDFGenerator
    {
        public static Document GeneratePdf(Bills bill)
        {
     
            Document document = new Document();
            Page page = document.Pages.Add();
            var header = new TextFragment("Bill");
            header.TextState.Font = FontRepository.FindFont("Arial");
            header.TextState.FontSize = 24;
            header.HorizontalAlignment = HorizontalAlignment.Center;
            header.Margin.Bottom = 10;
            //header.Position = new Position(130, 720);
            page.Paragraphs.Add(header);

            var descriptionText = "This bill is auto-generated by BillyTheService!";
            var description = new TextFragment(descriptionText);
            description.TextState.Font = FontRepository.FindFont("Times New Roman");
            description.TextState.FontSize = 14;
            description.HorizontalAlignment = HorizontalAlignment.Center;
            description.Margin.Bottom = 20;
            page.Paragraphs.Add(description);

        
            var prodHeader = new TextFragment("Product");
            prodHeader.TextState.Font = FontRepository.FindFont("Arial");
            prodHeader.TextState.FontSize = 18;
            prodHeader.HorizontalAlignment = HorizontalAlignment.Center;
            prodHeader.Margin.Bottom = 10;
            page.Paragraphs.Add(prodHeader);

            var product = new Table
            {
                ColumnWidths = "150",
                Border = new BorderInfo(BorderSide.Box, 1f, Color.DarkSlateGray),
                DefaultCellBorder = new BorderInfo(BorderSide.Box, 0.5f, Color.Black),
                DefaultCellPadding = new MarginInfo(4.5, 4.5, 4.5, 4.5),
                Margin =
                {
                    Bottom = 50
                },
                DefaultCellTextState =
                {
                    Font =  FontRepository.FindFont("Helvetica")
                }
            };

            var headerRow = product.Rows.Add();
            headerRow.Cells.Add("Name");
            headerRow.Cells.Add("Price");
            headerRow.Cells.Add("Currency");
            foreach (Cell headerRowCell in headerRow.Cells)
            {
                headerRowCell.BackgroundColor = Color.Gray;
                headerRowCell.DefaultCellTextState.ForegroundColor = Color.WhiteSmoke;
            }

            var dataRow = product.Rows.Add();
            dataRow.Cells.Add(bill.Product);
            dataRow.Cells.Add(bill.ProductPrice.ToString());
            dataRow.Cells.Add(bill.Currency);

            page.Paragraphs.Add(product);


            var sellerHeader = new TextFragment("Seller");
            sellerHeader.TextState.Font = FontRepository.FindFont("Arial");
            sellerHeader.TextState.FontSize = 18;
            sellerHeader.HorizontalAlignment = HorizontalAlignment.Center;
            sellerHeader.Margin.Bottom = 10;
            page.Paragraphs.Add(sellerHeader);

            var seller = new Table
            {
                ColumnWidths = "75",
                Border = new BorderInfo(BorderSide.Box, 1f, Color.DarkSlateGray),
                DefaultCellBorder = new BorderInfo(BorderSide.Box, 0.5f, Color.Black),
                DefaultCellPadding = new MarginInfo(4.5, 4.5, 4.5, 4.5),
                Margin =
                {
                    Bottom = 50
                },
                DefaultCellTextState =
                {
                    Font =  FontRepository.FindFont("Helvetica")
                }
            };

            headerRow = seller.Rows.Add();
            headerRow.Cells.Add("First Name");
            headerRow.Cells.Add("Last Name");
            headerRow.Cells.Add("Account Number");
            headerRow.Cells.Add("E-Mail");
            headerRow.Cells.Add("PhoneNumber");
            headerRow.Cells.Add("NIP");

            foreach (Cell headerRowCell in headerRow.Cells)
            {
                headerRowCell.BackgroundColor = Color.Gray;
                headerRowCell.DefaultCellTextState.ForegroundColor = Color.WhiteSmoke;
            }

            dataRow = seller.Rows.Add();
            dataRow.Cells.Add(bill.SellerFirstName);
            dataRow.Cells.Add(bill.SellerLastName);
            dataRow.Cells.Add(bill.SellerAccountNumber);
            dataRow.Cells.Add(bill.SellerEmail);
            dataRow.Cells.Add(bill.SellerPhone);
            dataRow.Cells.Add(bill.SellerNip);


            page.Paragraphs.Add(seller);


            var clientHeader = new TextFragment("Client");
            clientHeader.TextState.Font = FontRepository.FindFont("Arial");
            clientHeader.TextState.FontSize = 18;
            clientHeader.HorizontalAlignment = HorizontalAlignment.Center;
            clientHeader.Margin.Bottom = 10;
            page.Paragraphs.Add(clientHeader);

            var client = new Table
            {
                ColumnWidths = "150",
                Border = new BorderInfo(BorderSide.Box, 1f, Color.DarkSlateGray),
                DefaultCellBorder = new BorderInfo(BorderSide.Box, 0.5f, Color.Black),
                DefaultCellPadding = new MarginInfo(4.5, 4.5, 4.5, 4.5),
                Margin =
                {
                    Bottom = 10
                },
                DefaultCellTextState =
                {
                    Font =  FontRepository.FindFont("Helvetica")
                }
            };

            headerRow = client.Rows.Add();
            headerRow.Cells.Add("First Name");
            headerRow.Cells.Add("Last Name");
            headerRow.Cells.Add("E-Mail");


            foreach (Cell headerRowCell in headerRow.Cells)
            {
                headerRowCell.BackgroundColor = Color.Gray;
                headerRowCell.DefaultCellTextState.ForegroundColor = Color.WhiteSmoke;
            }

            dataRow = client.Rows.Add();
            dataRow.Cells.Add(bill.BuyerFirstName);
            dataRow.Cells.Add(bill.BuyerLastName);
            dataRow.Cells.Add(bill.BuyerEmail);



            page.Paragraphs.Add(client);

            return document;

        }
    }
}

